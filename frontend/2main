import "./style.css";

const habitsContainer = document.getElementById("habitContainer");
// const app = document.getElementById("app");
// app.appendChild(habitsContainer);

async function fetchHabits() {
  try {
    const response = await fetch("http://localhost:3000/habits", {
      method: "GET",
    });
    if (!response.ok) {
      throw new Error("Network response was not ok");
    }
    const data = await response.json();

    // Vider le conteneur avant d'ajouter les nouvelles habitudes
    habitsContainer.innerHTML = "";

    // Ajouter chaque habitude au conteneur
    data.habits.forEach((habit) => {
      let habitElement = document.createElement("div");
      let today = new Date().toISOString().slice(0, 10); // Récupérer la date d'aujourd'hui

      habitElement.classList.add("habit", "card", "habit-square");
      if (habit.daysDone[today]) {
        habitElement.classList.add("habit-done");
      }
      habitElement.textContent = habit.title;

      habitElement.addEventListener("click", async () => {
        try {
          // Créer une copie de l'habitude à mettre à jour
          const updateHabit = { ...habit };
          const today = new Date().toISOString().slice(0, 10);

          // Inverser le statut pour aujourd'hui (true/false)
          updateHabit.daysDone[today] = !habit.daysDone[today];

          const response = await fetch(
            `http://localhost:3000/habits/${habit.id}`,
            {
              method: "PATCH",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(updateHabit),
            }
          );

          if (!response.ok) {
            throw new Error("Failed to update habit");
          }

          const updatedHabit = await response.json();
          console.log(updatedHabit); // Afficher l'habitude mise à jour

          // Basculer la classe pour l'élément d'habitude (affichage visuel)
          habitElement.classList.toggle("habit-done");
          habit = { ...updateHabit };
        } catch (error) {
          console.error("Error updating habit:", error);
        }
      });
      habitsContainer.appendChild(habitElement); // Ajoute l'élément au conteneur
    });
  } catch (error) {
    console.error("Error:", error);
  }
}

fetchHabits();

const dialog = document.querySelector("dialog");
const openModal = document.getElementById("openModal");
const habitNameInput = document.getElementById("habitNameInput");
const closeDialog = document.getElementById("closeDialog");
closeDialog.addEventListener("click", () => dialog.close());
openModal.addEventListener("click", () => {
  dialog.showModal();
});

const addHabit = document.getElementById("addNewhabit");
addHabit.addEventListener("click", async (e) => {
  e.defaultPrevented;
  const habitName = habitNameInput.value; // Récupère la valeur de l'input
  console.log(habitName); // Tu peux voir ici si la valeur est récupérée correctement

  const today = new Date().toISOString().slice(0, 10);
  const newHabit = {
    id: "",
    title: habitName,
    daysDone: {
      [today]: false,
    },
  };
  habitNameInput.value = "";
  await fetch("http://localhost:3000/habits", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(newHabit),
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok " + response.statusText);
      }
      return response.json();
    })
    .then((data) => console.log("Habit added:", data))
    .catch((error) => console.error("Error:", error));
  fetchHabits();
});
